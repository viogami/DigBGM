// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: gcn.proto

package gcn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GCNService_ProcessGCN_FullMethodName = "/GCNService/ProcessGCN"
)

// GCNServiceClient is the client API for GCNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GCNServiceClient interface {
	ProcessGCN(ctx context.Context, in *GCNRequest, opts ...grpc.CallOption) (*GCNResult, error)
}

type gCNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGCNServiceClient(cc grpc.ClientConnInterface) GCNServiceClient {
	return &gCNServiceClient{cc}
}

func (c *gCNServiceClient) ProcessGCN(ctx context.Context, in *GCNRequest, opts ...grpc.CallOption) (*GCNResult, error) {
	out := new(GCNResult)
	err := c.cc.Invoke(ctx, GCNService_ProcessGCN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCNServiceServer is the server API for GCNService service.
// All implementations must embed UnimplementedGCNServiceServer
// for forward compatibility
type GCNServiceServer interface {
	ProcessGCN(context.Context, *GCNRequest) (*GCNResult, error)
	mustEmbedUnimplementedGCNServiceServer()
}

// UnimplementedGCNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGCNServiceServer struct {
}

func (UnimplementedGCNServiceServer) ProcessGCN(context.Context, *GCNRequest) (*GCNResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessGCN not implemented")
}
func (UnimplementedGCNServiceServer) mustEmbedUnimplementedGCNServiceServer() {}

// UnsafeGCNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GCNServiceServer will
// result in compilation errors.
type UnsafeGCNServiceServer interface {
	mustEmbedUnimplementedGCNServiceServer()
}

func RegisterGCNServiceServer(s grpc.ServiceRegistrar, srv GCNServiceServer) {
	s.RegisterService(&GCNService_ServiceDesc, srv)
}

func _GCNService_ProcessGCN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCNServiceServer).ProcessGCN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCNService_ProcessGCN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCNServiceServer).ProcessGCN(ctx, req.(*GCNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GCNService_ServiceDesc is the grpc.ServiceDesc for GCNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GCNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GCNService",
	HandlerType: (*GCNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessGCN",
			Handler:    _GCNService_ProcessGCN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcn.proto",
}
